#include "DxLib.h"

/*概要*/
//C言語の『関数まで』で組んだシーン管理(シーンマネージャー)
//分からない学生はCの『基礎文法』を復習してください。

/*構造*/
//それぞれのシーンを関数(メソッド)として分割して、
//実行するメソッドを切り替える事でシーン管理をしている。

/*グローバル変数*/
//定数
constexpr int GAMEEND = 0;
constexpr int TITLESCENE = 1;
constexpr int GAMESCENE = 2;
//変数
bool isInputEnterHold = false;//InputEnter用の変数
bool isInputUpHold = false;//InputUp用の変数
bool isInputDownHold = false;//InputDown用の変数

/*プロトタイプ宣言*/
//定義はMainの下。
int TitleScene();//タイトルシーン
int GameScene();//ゲームシーン
bool InputEnter();//Enterが押されたかどうかを判定する関数
bool InputUp();//Upが押されたかどうかを判定する関数
bool InputDown();//Downが押されたかどうかを判定する関数


//Dxlibのエントリーポイント
int WINAPI WinMain(_In_ HINSTANCE hInstance, _In_opt_  HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ int nShowCmd)
{
	/*定数*/
	//画面サイズ
	constexpr int ScreenSizeX = 1280;//幅
	constexpr int ScreenSizeY = 720;//高さ

	/*変数*/
	LONGLONG roopStartTime = 0;
	bool gameRoop = true;
	int nextScene = TITLESCENE;

	/*Dxlib初期化*/
	SetGraphMode(ScreenSizeX, ScreenSizeY, 32);//画面サイズと解像度
	ChangeWindowMode(true);//Windowモード
	if (DxLib_Init() == -1) { return -1; }//Dxlib初期化
	SetDrawScreen(DX_SCREEN_BACK);//ダブルバッファリング

	/*ゲームループ部*/
	//gameRoop.
	while (gameRoop)
	{
		//ループ開始時刻の確保
		roopStartTime = GetNowHiPerformanceCount();

		//裏画面の初期化
		ClearDrawScreen();

		/*ゲーム処理部*/
		//シーン管理
		if (nextScene == TITLESCENE)
		{
			nextScene = TitleScene();
		}
		else if (nextScene == GAMESCENE)
		{

			nextScene = GameScene();
		}
		else if (nextScene == GAMEEND)
		{
			break;
		}

		//裏画面を表へ
		ScreenFlip();

		//リフレッシュ処理(-1ならエラー)
		if (ProcessMessage() < 0) { break; }

		//ループ終了処理
		if (CheckHitKey(KEY_INPUT_ESCAPE)) { break; }

		//fps固定(60fps:16.66ms)
		//ループ開始時刻から16.66ms経つまで停止
		while (GetNowHiPerformanceCount() - roopStartTime < 16667) {}
	}

	/*終了処理*/
	DxLib_End();//Dxlib終了処理
	return 0;//終了 
}

/*シーン定義*/
//タイトル画面を実行するシーン。
//返り値で次に実行するシーンを指定する。
int TitleScene()
{
	/*変数*/
	bool gameRoop = true;
	int nextScene = TITLESCENE;
	int arrowPosY = 440;

	/*ゲーム処理*/
	while (gameRoop)
	{

		/*計算処理*/
		//Down.
		if (InputDown())
		{
			if (arrowPosY == 440)
			{
				arrowPosY = 480;
			}
			else
			{
				arrowPosY = 440;
			}
		}
		//Up.
		if (InputUp())
		{
			if (arrowPosY == 440)
			{
				arrowPosY = 480;
			}
			else
			{
				arrowPosY = 440;
			}
		}

			
		/*Draw処理*/
		//裏画面の初期化
		ClearDrawScreen();

		//タイトルロゴ
		SetFontSize(80);//フォントサイズ上昇
		DrawString(460, 240, "DxlibGame", GetColor(255, 255, 255));
		SetFontSize(20);//フォントサイズ初期化

		//ゲームシーンテキスト
		DrawString(600, 440, "START", GetColor(255, 255, 255));

		//ゲームエンドテキスト
		DrawString(600, 480, "END", GetColor(255, 255, 255));

		//矢印
		DrawString(560, arrowPosY, "->", GetColor(255, 255, 255));

		//DebugDraw処理
		DrawString(0, 0, "TitleScene", GetColor(255, 255, 255));//シーン名表示

		//裏画面を表へ
		ScreenFlip();

		/*シーン遷移処理*/
		//エンターでシーン変更
		if (InputEnter())
		{
			return GAMESCENE;
		}

	}

	//例外処理
	return TITLESCENE;
}
//ゲーム画面を実行するシーン。
//返り値で次に実行するシーンを指定する。
int GameScene()
{
	/*変数*/
	bool gameRoop = true;
	int nextScene = GAMESCENE;

	/*ゲーム処理*/
	while (gameRoop)
	{

		/*計算処理*/

		/*Draw処理*/
		//裏画面の初期化
		ClearDrawScreen();

		//DebugDraw処理
		DrawString(0, 0, "TitleScene", GetColor(255, 255, 255));//シーン名表示

		//裏画面を表へ
		ScreenFlip();

		/*シーン遷移処理*/
		//エンターでシーン変更
		if (InputEnter())
		{
			return TITLESCENE;
		}

	}

	//例外処理
	return TITLESCENE;
}

/*Input関数*/
//Enterが押されたかどうかを判定する関数
//Enterしか分からずイケてない。当然今後作り直していきます。
bool InputEnter()
{
	//指定フレーム以上押していたら押した判定
	if (CheckHitKey(KEY_INPUT_RETURN) && !isInputEnterHold)
	{
		isInputEnterHold = true;
		return true;
	}
	else if(!CheckHitKey(KEY_INPUT_RETURN))
	{
		isInputEnterHold = false;
	}

	return false;
}
//Upが押されたかどうかを判定する関数
//Upしか分からずイケてない。当然今後作り直していきます。
bool InputUp()
{
	//指定フレーム以上押していたら押した判定
	if (CheckHitKey(KEY_INPUT_UP) && !isInputDownHold)
	{
		isInputDownHold = true;
		return true;
	}
	else if (!CheckHitKey(KEY_INPUT_UP))
	{
		isInputDownHold = false;
	}

	return false;
}
//Downが押されたかどうかを判定する関数
//Downしか分からずイケてない。当然今後作り直していきます。
bool InputDown()
{
	//指定フレーム以上押していたら押した判定
	if (CheckHitKey(KEY_INPUT_DOWN) && !isInputDownHold)
	{
		isInputDownHold = true;
		return true;
	}
	else if (!CheckHitKey(KEY_INPUT_DOWN))
	{
		isInputDownHold = false;
	}

	return false;
}